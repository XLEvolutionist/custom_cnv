p.f<-subset(d.f, select=c("tP","nSites"))
p.f$tP<-subset(p.f,select="tP")/subset(d.f, select="nSites")
p.f<-subset(p.f, select=c("tP"))
p.f<-cbind(p.f,"grp"=rep(paste0("grp",i),length(d.f$tP)))
all.TP<-rbind(p.f,all.TP)
# for Tajima's D
t.f<-subset(d.f, select=c("Tajima"))
t.f<-cbind(t.f,"grp"=rep(paste0("grp",i),length(t.f$Tajima)))
all.TD<-rbind(t.f,all.TD)
# theta singletons
sn.df<-subset(d.f, select=c("tF","nSites"))
sn.df$tF<-sn.df$tF/sn.df$nSites
sn.df<-subset(sn.df, select=c("tF"))
sn.df<-cbind(sn.df,"grp"=rep(paste0("grp",i),length(sn.df$tF)))
all.ST<-rbind(sn.df,all.ST)
}#for
pi.df<-melt(all.TP)
TD.df<-melt(all.TD)
sn.df<-melt(all.ST)
# subset the data
#samp<-sample(x=1:dim(pi.df)[1],size=200000)
#pi.df<-pi.df[samp,]
#TD.df<-TD.df[samp,]
ggplot(data=pi.df, aes(y=pi.df$value,x=pi.df$grp,fill=pi.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
ylim(0,0.2)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")
#ylim(0,0.2)
#facet_wrap(~variable)
ggplot(data=sn.df, aes(y=sn.df$value,x=sn.df$grp,fill=sn.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")
ggplot(data=sn.df, aes(y=sn.df$value,x=sn.df$grp,fill=sn.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")+
ylim(0,0.5)
sfs
cut(sfs, breaks=c(0,5,10,15,20))
sfs<-apply(cnv.mat,1,function(x) table(x)[1])
hist(sfs,xlim=c(1,20), breaks = 19, col = "grey",main="Site Frequency Spectrum of down CNV")
par(mfrow=c(1,1))
hist(sfs,xlim=c(1,20), breaks = 19, col = "grey",main="Site Frequency Spectrum of down CNV")
cnv.mat<-cnv.mat[apply(cnv.mat,1,function(x) !any(x == 1)),]
sfs<-apply(cnv.mat,1,function(x) table(x)[1])
#remove 0, as there is
hist(sfs,xlim=c(1,20), breaks = 19, col = "grey",main="Site Frequency Spectrum of down CNV")
# load in some libraries
library(RCurl)
library(data.table)
library(ggplot2)
library(reshape2)
library(scales)
library(EDASeq)
library(gplots)
library(pheatmap)
library(fields)
library(vioplot)
# import the data from GitHub
url<-"https://raw.githubusercontent.com/XLEvolutionist/custom_cnv/master/data/normDepth.txt"
data <- getURL(url,
ssl.verifypeer=0L, followlocation=1L)
writeLines(data,'~/temp.txt')
norm.df<-read.table("~/temp.txt",header=TRUE)
norm.df<-data.table(norm.df)
hist(x=melt(subset(norm.df,select=-c(1:4,27,28)))$value, main="coverge (all samples)",
xlim=c(0,50), xlab="normalized coverage per kb",col="grey",cex.lab=1.6, breaks=5000)
hist(x=subset(norm.df,select="B73.bam")$B73.bam, main="coverage in B73",
xlim=c(0,50), xlab="normalized coverage per kb",col="grey",cex.lab=1.6, breaks=100)
# remove any genes with count less that one in B73
norm.df<-subset(norm.df,subset=norm.df$B73.bam > 1)
norm.df<-subset(norm.df,subset=norm.df$B73.bam < 15)
#remove any strange genes with super high coverage, in any sample
norm.df<-subset(norm.df,subset=apply(subset(norm.df, select=-c(1:4,27,28)),1,function(x) max(x)) < 100)
hist(norm.df$B73.bam, breaks=50, col="grey", main ="B73 trimmed",
xlab="normalized coverage per kb",cex.lab=1.6, xlim=c(0,30))
plot(norm.df$pct_gc,log(norm.df$TIL01), main="GC content and coverage", xlab="GC content (fraction)", ylab="log(mrmk)",col = alpha("cornflowerblue", 0.3), cex = 0.1,xlim=c(0.15,0.9))
# subset the data.frame
countData<-subset(norm.df,select=-c(1:4,27,28))
# turn it into a matrix
countData<-as.matrix(countData)
# head(countData)
# now try to normalize the data according to GC content
gcNorm<-withinLaneNormalization(x=countData, y=norm.df$pct_gc, which="loess", round=FALSE)
# modify make a new data.table of the gc normalized counts
gcNorm<-data.table(gcNorm)
save(gcNorm, file="~/gcNorm.RData")
load("~/gcNorm.RData")
gcNorm<-cbind(subset(norm.df,select=c(1:4)),gcNorm,subset(norm.df, select=c(27,28)))
#head(gcNorm)
plot(gcNorm$pct_gc,log(gcNorm$TIL01), main="GC content and GC normalized coverage", xlab="GC content (fraction)", ylab="log(mrmk)",col = alpha("cornflowerblue", 0.3), cex = 0.1, xlim=c(0.15,0.9))
hist(gcNorm$B73.bam, col="grey", main ="B73 GC normalized",
xlab="normalized coverage per kb",cex.lab=1.6, breaks = 200, xlim=c(0,50))
# first load in the Swanson-Wagner data.
# import the data from GitHub
url<-"https://raw.githubusercontent.com/XLEvolutionist/custom_cnv/master/data/SW_cnv_calls.csv"
data <- getURL(url,
ssl.verifypeer=0L, followlocation=1L)
writeLines(data,'~/SW.csv')
sw.df<-read.csv("~/SW.csv",header=TRUE)
sw.df<-data.table(sw.df)
# remove those genes not on the main scaffolds
sw.df<-subset(sw.df,subset=Chromosome != "chrUN")
# head(sw.df)
# now grab all those genes that are not normal (i.e.  not 0)
TIL.genes<-subset(sw.df,subset=sw.df$TIL1 != 0, select=c(GeneID,TIL1))
TIL.up<-subset(sw.df,subset=sw.df$TIL1 == 1, select=c(GeneID,TIL1))
TIL.down<-subset(sw.df,subset=sw.df$TIL1 == -1, select=c(GeneID,TIL1))
# grab the coverage data for those genes with CNV calls
coverage_sw<-subset(gcNorm,subset=name %in% TIL.genes$GeneID)
# grab the coverage data for those genes with CNV calls
down_sw<-subset(gcNorm,subset=name %in% TIL.down$GeneID, select=c(TIL01,B73.bam))
# grab the coverage data for those genes with CNV calls
up_sw<-subset(gcNorm,subset=name %in% TIL.up$GeneID,select=c(TIL01,B73.bam))
dim(coverage_sw)
dim(TIL.genes)
# plot a histgoram of TIL1
hist(gcNorm$TIL01, main ="TIL01 read-depth",
xlab="normalized coverage per kb",cex.lab=1.6, breaks = 500, xlim=c(0,40))
abline(v=down_sw$TIL01,lwd= 0.1,xpd=FALSE,col = "blue")
hist(gcNorm$TIL01, main ="TIL01 read-depth",
xlab="normalized coverage per kb",cex.lab=1.6, breaks = 500, xlim=c(0,40))
abline(v=up_sw$TIL01,lwd= 0.1,xpd=FALSE,col="red")
all<-data.frame("depth"=log(c(as.numeric(up_sw$TIL01)+1,as.numeric(down_sw$TIL01)+1)),"call"=c(rep("up",length(up_sw$TIL01)),rep("down",length(down_sw$TIL01))))
max(as.numeric(all$depth))
ggplot(all, aes(x=depth)) +
geom_histogram(data=subset(all,subset=call =="up"), fill="red",alpha = 0.2) +
geom_histogram(data=subset(all,subset=call =="down"), fill="blue",alpha = 0.2) +
xlab("log(depth+1)")
plot(gcNorm$B73.bam,gcNorm$TIL01, log="xy", cex=0.4, col=alpha("grey",0.5), xlab="log(normalized coverage in B73)",
ylab="log(normalized coverage in TIL01)")
abline(0,1)
points(down_sw$B73.bam,down_sw$TIL01, col = "blue", cex=0.5)
points(up_sw$B73.bam,up_sw$TIL01, col = "red", cex=0.5)
legend(x="topright",legend=c("down","up"), col=c("blue","red"), pch = 1)
hist(log(gcNorm$TIL01/gcNorm$B73.bam), xlab="coverage difference (TIL01/B73)", col= "grey", main ="", breaks=200)
abline(v=log(down_sw$TIL01/down_sw$B73.bam), col = "blue", lwd=0.15)
abline(v=log(up_sw$TIL01/up_sw$B73.bam), col = "red", lwd=0.15)
hist(log((gcNorm$TIL01/gcNorm$B73.bam)), xlab="coverage ratio (TIL01/B73)", col= alpha("grey",0.9), main ="", breaks=200, add=TRUE)
abline(v=log(1), col = "black", lwd=5, lty = "dashed")
hist(log(down_sw$TIL01/down_sw$B73.bam), xlab="coverage ratio (TIL01/B73) over CNV", col= alpha("blue",0.3), main ="", breaks=40, xlim=c(-6,4))
hist(log(up_sw$TIL01/up_sw$B73.bam), xlab="coverage ratio (TIL01/B73) over CNV", col= alpha("red",0.3), main ="", breaks=40, add=TRUE)
legend(x="topright",legend=c("down","up"), col=c(alpha("blue",0.3),alpha("red",0.6)), pch = 15)
abline(v=log(1), col = "black", lwd=5, lty = "dashed")
limit<-qnorm(0.025/(dim(gcNorm)[1]),lower.tail=FALSE)
ratio<-gcNorm$TIL01/gcNorm$B73.bam
stdev<-sd(ratio)
# so you have to be more than limit*stdev away from the mean to be called CNV
linePos<-log(mean(ratio)+(limit*stdev))
hist(log(gcNorm$TIL01/gcNorm$B73.bam), xlab="log(coverage difference (TIL01/B73))", col= "grey", main ="", breaks=200)
abline(v=log(mean(ratio))-linePos, col = "black", lwd=1, lty = "dashed",lend=1)
abline(v=log(mean(ratio))+linePos, col = "black", lwd=1, lty = "dashed",lend=1)
abline(v=log(mean(ratio)), col = "black", lwd=3, lty = "solid",lend=1)
```
The solid line is the mean, and the two dashed lines represent the proposed CNV cut offs for up and down CNV.
##Now see what these distribution look like in Palmar Chico##
The next set of graphs will not be printed to screen but saved into a pdf, one graph for each of our 20 Palmar Chico lines (and TIL01 too). It is important to remember that these Palmar Chico lines are typically not inbred like the TIL01 lines used in the ground truthing section.
So the first step is to grab the sample names:
```{r}
samples<-colnames(gcNorm)[-c(1:4,27,28)]
```
I firstly want to check if the distribution of coverage is sensible in the 20 Palmar Chico lines...
```{r}
# make a matrix of 0, representing the "no evidence of change in copy-number"
cnv.mat<-matrix(data=0,nrow=dim(gcNorm)[1],ncol=length(samples))
rownames(cnv.mat)<-gcNorm$name
colnames(cnv.mat)<-samples
# make a matrix to store a q-vlaue style number for each gene
q.mat<-cnv.mat
# head(cnv.mat)
# open up a pdf and print the histograms
pdf("samples_covergae.pdf")
par(mfrow=c(3,2))
# cycle through the samples
for ( s in samples ) {
# print(s)
# subset the data
sub.df<-subset(gcNorm,select=c(s,"name"))
sub.df<-data.frame(sub.df)
# print(head(sub.df))
hist(sub.df[,s], main =paste0(s, " read-depth"),
xlab="normalized coverage per kb",cex.lab=1.4, breaks = c(seq(0,20,0.2),20.00001,max(sub.df[,s])), xlim=c(0,21),
col = alpha("cornflowerblue",0.5),border=alpha("cornflowerblue",0.7))
# calculate the ratio between sample and reference"
ratio<-sub.df[,s]/subset(gcNorm,select="B73.bam")
ratio<-data.matrix(ratio)
ratio<-log(ratio+0.1)
#ratio<-log(ratio1)
stdev<-sd(ratio)
d<-(mean(ratio)-ratio)
qVal<-pnorm(q=d,mean=0,sd=stdev)
q.mat[,s]<- -log(qVal)
# print(max(ratio))
# plot the ratio as a histogram
hist(ratio, main=paste0(s," ratio (sample/ref)"),
cex.lab=1.4, xlab="log(coverage difference (sample/ref))", col=alpha("cornflowerblue",0.4),
border=alpha("cornflowerblue",0.4), breaks=200)
# calculate the CNV "limit
#limit<-qnorm(0.05/(dim(gcNorm)[1]),lower.tail=FALSE)
limit<-3
linePos<-mean(ratio)+(limit*stdev)
abline(v=mean(ratio)-abs(mean(ratio)+linePos), col = "black", lwd=1, lty = "dashed",lend=1)
abline(v=mean(ratio)+(mean(ratio)+linePos), col = "black", lwd=1, lty = "dashed",lend=1)
abline(v=mean(ratio), col = "black", lwd=2, lty = "solid",lend=1)
#turn sub.df back into a data.table
sub.df<-data.table(sub.df,ratio)
# call up CNV
up<-subset(sub.df,subset=sub.df$B73.bam > mean(ratio)+linePos)
cnv.mat[rownames(cnv.mat) %in% up$name,s]<-1
# call the down CNV
down<-subset(sub.df,subset=sub.df$B73.bam < -abs(mean(ratio)-linePos))
cnv.mat[rownames(cnv.mat) %in% down$name,s]<--1
}
dev.off()
# remove B73 and TIL01, and the inbred
cnv.mat<-cnv.mat[,-c(1,22)]
# remove all rows with zero
cnv.mat<-cnv.mat[apply(cnv.mat,1,function(x) !all(x == 0)),]
print(dim(cnv.mat))
#save the CNV calls
save(file="cnvCall.RData", cnv.mat)
#heatmap.2(cnv.mat, trace="none",key.title ="",density.info="none",labRow="",col=c("mediumblue","black","red3"))
pheatmap(cnv.mat,treeheight_row = 0, treeheight_col = 100, show_rownames = 0)
url<-"https://raw.githubusercontent.com/XLEvolutionist/custom_cnv/master/data/chrLenFile.txt"
data <- getURL(url,
ssl.verifypeer=0L, followlocation=1L)
writeLines(data,'~/chr_len.txt')
clen.df<-read.csv("~/chr_len.txt",header=TRUE)
# # now make a data.frame to send to the function using whatever sample
res<-data.frame("chr"=gcNorm$chr,"pos"=gcNorm$start,"qval"=q.mat[,"JRIAL2J"])
# find the unique chr names
chrs<-unique(res$chr)
# write my own function to calculate a manhattan plot
#define a useful function
manplot<-function(dt,chr,cols=rainbow(n=10),lim=-log(pnorm(q=limit*stdev,mean=0,sd=stdev,lower.tail=F))) {
# first calculate the total length of the genome of and the position of the chromosomal tick marks
total<-sum(chr$BP)
#now calculate the tick marks at the end of each chromosome.
ticks<-c(0,cumsum(chr$BP))
# now the mid point range (i.e where to put the labels)
midPoint<-NULL
for ( i in 2:length(ticks) ) {
midPoint[i]<-ticks[i-1]+((ticks[i]-ticks[i-1])/2)
}
# save the original positions for use later
positionOri<-dt$pos
#make a new value for position, as if the chromosomes were laid end to end
for ( i in 1:length(chr$CHR) ) {
# grab the total to add
dt$pos[dt$chr==i]<-ticks[i]+dt$pos[dt$chr==i]
} #for
midPoint<-midPoint[-1]
# now find all the unique chromosome names
chrs<-unique(chr$CHR)
plot(dt$pos, dt$qval, xaxt="n", xlab="chromosome", ylab="qvalue", col=cols[i],cex=.7,pch=16, type= "n", bty="n",cex.lab=1.3)
for ( i in 1:length(chrs) ) {
points(dt$pos[dt$chr==i], dt$qval[dt$chr==i], xaxt="n", col=cols[i],cex=.7,pch=16)
}
axis(1,at=midPoint,labels=chr$CHR, tick = F,cex.axis=1.3)
axis(1,at=ticks,labels=F, tick = T)
abline(h=lim,lwd=2,lty=1)
# now for each chromosome plot the data
for ( i in 1:length(chrs) ) {
plot(positionOri[dt$chr==i], dt$qval[dt$chr==i], col="black",cex=.7,pch=16, xlab="chromosome", ylab="qvalue")
abline(h=lim,lwd=2,lty=1)
}
}
#draw the plots
pdf("test.pdf",width=7,height=5)
par(mfrow=c(1,1))
manplot(res,chr=clen.df)
dev.off()
# fist remove genes with up CNVs, in any individual.
cnv.mat<-cnv.mat[apply(cnv.mat,1,function(x) !any(x == 1)),]
# now figure out how many samples are down CNV for each gene
par(mfrow=c(1,1))
sfs<-apply(cnv.mat,1,function(x) table(x)[1])
#remove 0, as there is
hist(sfs,xlim=c(1,20), breaks = 19, col = "grey",main="Site Frequency Spectrum of down CNV")
groups<-cut(sfs, breaks=c(0,5,10,15,20))
head(groups)
head(sfs)
unique(groups)[1]
unique(groups)[2]
unique(groups)[3]
unique(groups)[4]
unique(groups)
order(unique(groups))
levels(groups)
levels(groups)[4]
levels(groups)[1]
levels(groups)[2]
levels(groups)[3]
levels(groups)[4]
# for each list of genes
grp<-list(group1,group2,group3,group4)
nullGenes<-gcNorm
for ( i in 1:length(grp)) {
# now get the gene co-ordinates for each group
genes<-subset(gcNorm,subset=as.character(gcNorm$name) %in% as.vector(grp[[i]]), select=c(1:4))
nullGenes<-subset(nullGenes,subset=!as.character(nullGenes$name) %in% as.vector(grp[[i]]), select=c(1:4))
#print(head(genes))
genes<-data.frame(genes)
genes<-genes[order(genes$chr,genes$start,decreasing=F),]
write.table(file=paste0("group",i,".txt"),genes, quote=F)
}
#write out the null genes (i.e. those with no CNV calls)
nullGenes<-nullGenes[order(nullGenes$chr,nullGenes$start,decreasing=F),]
write.table(file=paste0("group",i+1,".txt"),nullGenes, quote=F)
levels(groups)[1]
min(sfs)
unique(groups)
ggplot(data=sn.df, aes(y=sn.df$value,x=sn.df$grp,fill=sn.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")+
ylim(0,0.2)
ggplot(data=pi.df, aes(y=pi.df$value,x=pi.df$grp,fill=pi.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
ylim(0,0.2)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")
#ylim(0,0.2)
#facet_wrap(~variable)
ggplot(data=pi.df, aes(y=pi.df$value,x=pi.df$grp,fill=pi.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
ylim(0,0.2)
ggplot(data=pi.df, aes(y=pi.df$value,x=pi.df$grp,fill=pi.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
ylim(0,0.1)
ggplot(data=sn.df, aes(y=sn.df$value,x=sn.df$grp,fill=sn.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")+
ylim(0,0.2)
ggplot(data=sn.df, aes(y=sn.df$value,x=sn.df$grp,fill=sn.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white")+
ylim(0,0.1)
length(sfs))
length(sfs)
sfs
total
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs,rep(i,length(sfs)))
}#for
head(total)
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs,as.character(i)=rep(i,length(sfs)))
}#for
as.character(i)
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs,as.character(i)=rep(i,length(sfs)))
}#for
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs,i=rep(i,length(sfs)))
}#for
total
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs,rep(i,length(sfs)))
}#for
melt(total)
levels(groups)[4]
length(grp)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=+0.7)
fun_mean <- function(x){
return(data.frame(y=mean(x),label=mean(x,na.rm=T)))}
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "text", label="----", size= 10, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=+0.7)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="black", size= 10, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=+1)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="black", size= 10, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=-1)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="black", size= 1, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=-1)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="white", size= 3, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=-1)
ggplot(data=pi.df, aes(y=pi.df$value,x=pi.df$grp,fill=pi.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="white", size= 2, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=-1, size=1.2) +
ylim(0,0.1)
ggplot(data=sn.df, aes(y=sn.df$value,x=sn.df$grp,fill=sn.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="white", size= 2, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=-1, size=1.2) +
ylim(0,0.1)
ggplot(data=TD.df, aes(y=TD.df$value,x=TD.df$grp,fill=TD.df$grp)) +
geom_boxplot(alpha=0.7) +
stat_summary(fun.y = "mean", geom = "point", color="white", size= 2, color= "white") +
stat_summary(fun.data = fun_mean, geom="text", vjust=-1, size=1.2) +
#ylim(0,0.2)
#facet_wrap(~variable)
)
melt(total)
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs)
}#for
melt(total)
sfs<-NULL
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs)
}#for
melt(total)
cbind(total,c(rep("0",41),rep("1",41),rep("2",41),rep("3",41),rep("4",41)))
total<-melt(total)
cbind(total,c(rep("0",41),rep("1",41),rep("2",41),rep("3",41),rep("4",41)))
dim(total)
head(totla)
head(total)
total<-NULL
# load in all the sfs files to
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs)
}#for
par(mfrow=c(4,1))
for ( i in 1:dim(total)[2]) {
barplot(total[-c(1,41),i],col="cornflowerblue",names.arg=1:39, ylab="probability",xlab="allele frequency", main = paste0("group ",i))
}#for
total<-melt(total)
dim(total)
cbind(total,c(rep("0",41),rep("1",41),rep("2",41),rep("3",41),rep("4",41)))
total<-NULL
# load in all the sfs files to
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs)
}#for
par(mfrow=c(4,1))
for ( i in 1:dim(total)[2]) {
barplot(total[-c(1,41),i],col="cornflowerblue",names.arg=1:39, ylab="probability",xlab="allele frequency", main = paste0("group ",i))
}#for
total<-melt(total)
cbind(total,"group"=c(rep("0",41),rep("1",41),rep("2",41),rep("3",41),rep("4",41)))
ggplot2(data=total, aes(y=value,x=Var1)) +
geom_area(fill=group, aplha=0.3)
ggplot(data=total, aes(y=value,x=Var1)) +
geom_area(fill=group, aplha=0.3)
total<-NULL
# load in all the sfs files to
for ( i in 0:4 ) {
sfs<-exp(scan(paste0("/Users/simonrenny-byfield/GitHubRepos/custom_cnv/sfs/",i,".teoparents20.sfs")))
total<-cbind(total,sfs)
}#for
par(mfrow=c(4,1))
for ( i in 1:dim(total)[2]) {
barplot(total[-c(1,41),i],col="cornflowerblue",names.arg=1:39, ylab="probability",xlab="allele frequency", main = paste0("group ",i))
}#for
total<-melt(total)
total<-cbind(total,"group"=c(rep("0",41),rep("1",41),rep("2",41),rep("3",41),rep("4",41)))
ggplot(data=total, aes(y=value,x=Var1)) +
geom_area(fill=group, aplha=0.3)
head(total)
ggplot(data=total, aes(y=value,x=Var1)) +
geom_area(aes(fill=group), aplha=0.3)
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_area(aes(fill=group), aplha=0.3)
max(total$value)
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_area(aes(fill=group), aplha=0.3, position="fill")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_area(aes(fill=group), aplha=0.3, position="fill",stat="identity")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_area(aes(fill=group), aplha=0.3, position="fill",stat="dodge")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_area(aes(fill=group), aplha=0.3, position="dodge")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_density(aes(fill=group), aplha=0.3, position="dodge")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_barplot(aes(fill=group), aplha=0.3, position="dodge", stat="identity")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_bar(aes(fill=group), aplha=0.3, position="dodge", stat="identity")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_bar(aes(fill=group), aplha=0.3, position="dodge")
subset(total,subset=group =="0")
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_histogram(data=subset(total,subset=group =="0"), fill="red",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="1"), fill="blue",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="2"), fill="green",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="3"), fill="yellow",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="4"), fill="purple",alpha = 0.2)
ggplot(data=total, aes(y=total$value,x=Var1)) +
geom_histogram(data=subset(total,subset=group =="0")$value, fill="red",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="1")$value, fill="blue",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="2")$value, fill="green",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="3")$value, fill="yellow",alpha = 0.2) +
geom_histogram(data=subset(total,subset=group =="4")$value, fill="purple",alpha = 0.2)
